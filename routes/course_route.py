import logging
from typing import List
from fastapi import APIRouter, Depends, HTTPException, Request, Form, logger
from fastapi.responses import HTMLResponse, RedirectResponse
from fastapi.templating import Jinja2Templates
from sqlalchemy.orm import Session
from database import get_db
from auth.auth_bearer import JWTBearer
from auth.auth_handler import decode_token
from models.course import Course
from services import course_service, enrollment_service, user_service, lesson_service, block_service, lesson_progress_service
from models.block import Block, BlockType
from models.lesson import Lesson
from models.user import RoleEnum

logger = logging.getLogger(__name__)
logger.setLevel(logging.INFO)

# –°–æ–∑–¥–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≤—ã–≤–æ–¥–∞ –≤ –∫–æ–Ω—Å–æ–ª—å
handler = logging.StreamHandler()
handler.setFormatter(logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s'))
logger.addHandler(handler)


router = APIRouter()
templates = Jinja2Templates(directory="templates")

# üîê –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ JWT —Ç–æ–∫–µ–Ω—É
async def get_current_user(request: Request, db: Session):
    access_token = request.cookies.get("access_token")
    if not access_token:
        return None
    
    try:
        # –î–µ–∫–æ–¥–∏—Ä—É–µ–º —Ç–æ–∫–µ–Ω –∏ –ø–æ–ª—É—á–∞–µ–º email
        email = decode_token(access_token)
        if not email:
            return None
        return user_service.get_user_by_email(db, email)
    except Exception as e:
        print(f"Error decoding token: {e}")
        return None


# üìå /courses
# @router.get("/courses", response_class=HTMLResponse)
# def get_courses(request: Request, db: Session = Depends(get_db)):
#     user = get_current_user(request, db)
#     courses = course_service.get_all_courses(db)
#     return templates.TemplateResponse("courses_student.html", {
#         "request": request,
#         "user": user,
#         "courses": courses,
#         "message": "–ö—É—Ä—Å—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã." if not courses else ""
#     })



def get_active_courses(db: Session) -> List[Course]:
    try:
        # –ü–æ–ª—É—á–∞–µ–º —Ç–æ–ª—å–∫–æ –∫—É—Ä—Å—ã —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º ACTIVE
        active_courses = db.query(Course).filter(
            Course.status == "ACTIVE"
        ).all()
        
        return active_courses
        
    except Exception as e:
        # –õ–æ–≥–∏—Ä—É–µ–º –æ—à–∏–±–∫—É, –µ—Å–ª–∏ —á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫
        print(f"Error fetching active courses: {str(e)}")
        raise  # –ú–æ–∂–Ω–æ –∑–∞–º–µ–Ω–∏—Ç—å –Ω–∞ –≤–æ–∑–≤—Ä–∞—Ç –ø—É—Å—Ç–æ–≥–æ —Å–ø–∏—Å–∫–∞ [] –≤ –ø—Ä–æ–¥–∞–∫—à–µ–Ω–µ


@router.get("/courses")
async def show_courses(
    request: Request,
    db: Session = Depends(get_db)
):
    # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–Ω–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ)
    user = await get_current_user(request, db)
    
    # –ü–æ–ª—É—á–∞–µ–º –∫—É—Ä—Å—ã
    courses = get_active_courses(db)
    
    return templates.TemplateResponse(
        "courses_student.html",
        {
            "request": request,
            "courses": courses,
            "current_user": user  # –ú–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –≤ —à–∞–±–ª–æ–Ω–µ
        }
    )


# üìå /course-details/{id}
@router.get("/course-details/{id}", response_class=HTMLResponse)
async def get_course_details(id: int, request: Request, db: Session = Depends(get_db)):
    user = await get_current_user(request, db)
    course = course_service.find_course_by_id(db, id)
    return templates.TemplateResponse("course-details.html", {
        "request": request,
        "course": course,
        "userId": user.id
    })

# üìå /myaccount/courses/{course_id}/lessons
@router.get("/myaccount/courses/{course_id}/lessons", response_class=HTMLResponse)
async def view_course_lessons(
    course_id: int,
    request: Request,
    db: Session = Depends(get_db)
):
    try:
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user = await get_current_user(request, db)
        if not user:
            return RedirectResponse("/login", status_code=302)
        
        # –ü–æ–ª—É—á–∞–µ–º –∫—É—Ä—Å
        course = course_service.find_course_by_id(db, course_id)
        if not course:
            raise HTTPException(status_code=404, detail="–ö—É—Ä—Å –Ω–µ –Ω–∞–π–¥–µ–Ω")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞–ø–∏—Å–∞–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞ –∫—É—Ä—Å
        print(user.id)
        enrollment = enrollment_service.find_enrollments_by_student(db, user)
        if not enrollment:
            return RedirectResponse("/myaccount", status_code=302)
        
        # –ü–æ–ª—É—á–∞–µ–º —É—Ä–æ–∫–∏ –∫—É—Ä—Å–∞
        lessons = lesson_service.find_lessons_by_course(db, course.id)
        
        # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –ø–æ —É—Ä–æ–∫–∞–º
        progress_map = {
            lesson.id: lesson_progress_service.has_completed_lesson(db, user, lesson)
            for lesson in lessons
        }
        
        return templates.TemplateResponse(
            "course_lessons.html",
            {
                "request": request,
                "course": course,
                "lessons": lessons,
                "lessonProgressMap": progress_map
            }
        )
        
    except Exception as e:
        print(f"Error in view_course_lessons: {str(e)}")
        raise HTTPException(status_code=500, detail="Internal Server Error")

# üìå /teacher/courses
@router.get("/teacher/courses", response_class=HTMLResponse)
async def view_teacher_courses(
    request: Request,
    db: Session = Depends(get_db)
):
    try:
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user = await get_current_user(request, db)
        if not user:
            return RedirectResponse("/login", status_code=302)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å - –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å
        if user.role != RoleEnum.TEACHER:
            return RedirectResponse("/courses", status_code=302)
        
        # –ü–æ–ª—É—á–∞–µ–º –∫—É—Ä—Å—ã –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è
        courses = course_service.find_by_instructor(db, user.id)
        
        return templates.TemplateResponse(
            "teacher_courses.html",
            {
                "request": request,
                "courses": courses
            }
        )
        
    except Exception as e:
        print(f"Error in view_teacher_courses: {str(e)}")
        raise HTTPException(status_code=500, detail="Internal Server Error")

# üìå /teacher/courses/{course_id}/lessons
@router.get("/teacher/courses/{course_id}/lessons", response_class=HTMLResponse)
async def view_course_lessons(
    request: Request,
    course_id: int,
    db: Session = Depends(get_db)
):
    try:
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ –∏ –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞
        user = await get_current_user(request, db)
        if not user or user.role != RoleEnum.TEACHER:
            return RedirectResponse("/login", status_code=302)
        
        # –ü–æ–ª—É—á–∞–µ–º –∫—É—Ä—Å –∏ —É—Ä–æ–∫–∏ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        course = course_service.find_course_by_id(db, course_id)
        lessons = lesson_service.find_lessons_by_course(db, course_id)
        
        return templates.TemplateResponse(
            "teacher_course_lessons.html",
            {
                "request": request,
                "course": course,
                "lessons": lessons
            }
        )
        
    except Exception as e:
        logger.error(f"Error in view_course_lessons: {str(e)}")
        raise HTTPException(status_code=500, detail="Internal Server Error")

# üìå /teacher/courses/{course_id}/lessons/new
@router.get("/teacher/courses/{course_id}/lessons/new", response_class=HTMLResponse)
async def show_create_lesson_form(
    request: Request,
    course_id: int,
    db: Session = Depends(get_db)
):
    try:
        logger.info(f"Attempting to show create lesson form for course {course_id}")
        
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user = await get_current_user(request, db)
        if not user:
            logger.warning("Unauthorized access attempt - no user")
            return RedirectResponse("/login", status_code=302)
        
        if user.role != RoleEnum.TEACHER:
            logger.warning(f"Access denied for user {user.id} - not a teacher")
            return RedirectResponse("/courses", status_code=302)
        
        # –ü–æ–ª—É—á–∞–µ–º –∫—É—Ä—Å
        course = course_service.find_course_by_id(db, course_id)
        if not course:
            logger.error(f"Course not found: {course_id}")
            raise HTTPException(status_code=404, detail="–ö—É—Ä—Å –Ω–µ –Ω–∞–π–¥–µ–Ω")
        
        if course.instructor_id != user.id:
            logger.warning(f"Access denied - course {course_id} doesn't belong to teacher {user.id}")
            raise HTTPException(status_code=403, detail="–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω: –ö—É—Ä—Å –Ω–µ –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç —ç—Ç–æ–º—É —É—á–∏—Ç–µ–ª—é")
        
        # –°–æ–∑–¥–∞–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –¥–ª—è –Ω–æ–≤–æ–≥–æ —É—Ä–æ–∫–∞
        lesson = {
            "id": None,
            "title": "",
            "course_id": course_id,
            "blocks": [{
                "id": None,
                "title": "",
                "type": "TEXT",
                "content": ""
            }]
        }
        
        logger.info(f"Rendering form for new lesson in course {course_id}")
        return templates.TemplateResponse(
            "teacher-create-lesson.html",
            {
                "request": request,
                "course": course,
                "lesson": lesson
            }
        )
        
    except HTTPException as he:
        logger.error(f"HTTPException in show_create_lesson_form: {he.detail}")
        raise he
    except Exception as e:
        logger.error(f"Unexpected error in show_create_lesson_form: {str(e)}", exc_info=True)
        raise HTTPException(status_code=500, detail="Internal Server Error")

# ‚úÖ –ü–æ–∫–∞–∑–∞—Ç—å —Ñ–æ—Ä–º—É —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —É—Ä–æ–∫–∞
@router.get("/teacher/courses/{course_id}/lessons/{lesson_id}/edit", response_class=HTMLResponse)
async def show_edit_lesson_form(
    request: Request,
    course_id: int,
    lesson_id: int,
    db: Session = Depends(get_db)
):
    try:
        user = await get_current_user(request, db)
        if not user or user.role != RoleEnum.TEACHER:
            return RedirectResponse("/login", status_code=302)
        
        course = course_service.find_course_by_id(db, course_id)
        lesson = lesson_service.find_by_id(db, lesson_id)
        
        if not course or not lesson:
            raise HTTPException(status_code=404, detail="–ö—É—Ä—Å –∏–ª–∏ —É—Ä–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω")
        if course.instructor_id != user.id or lesson.course_id != course_id:
            raise HTTPException(status_code=403, detail="–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")
        
        return templates.TemplateResponse(
            "teacher-create-lesson.html",
            {
                "request": request,
                "course": course,
                "lesson": lesson
            }
        )
    except HTTPException as he:
        raise he
    except Exception as e:
        logger.error(f"Error in show_edit_lesson_form: {str(e)}", exc_info=True)
        raise HTTPException(status_code=500, detail="Internal Server Error")

# ‚úÖ –£–¥–∞–ª–∏—Ç—å —É—Ä–æ–∫
@router.post("/teacher/courses/{course_id}/lessons/{lesson_id}/delete", response_class=HTMLResponse)
async def delete_lesson_form(
    request: Request,
    course_id: int,
    lesson_id: int,
    db: Session = Depends(get_db)
):
    try:
        user = await get_current_user(request, db)
        if not user or user.role != RoleEnum.TEACHER:
            return RedirectResponse("/login", status_code=302)
        
        course = course_service.find_course_by_id(db, course_id)
        lesson = lesson_service.find_by_id(db, lesson_id)
        
        if not course or not lesson:
            raise HTTPException(status_code=404, detail="–ö—É—Ä—Å –∏–ª–∏ —É—Ä–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω")
        if course.instructor_id != user.id or lesson.course_id != course_id:
            raise HTTPException(status_code=403, detail="–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")
        
        lesson_service.delete_lesson_by_id(db, lesson_id)
        return RedirectResponse(f"/teacher/courses/{course_id}/lessons", status_code=303)
    except HTTPException as he:
        raise he
    except Exception as e:
        logger.error(f"Error deleting lesson: {str(e)}", exc_info=True)
        raise HTTPException(status_code=500, detail="Error deleting lesson")

# ‚úÖ –û–±–Ω–æ–≤–∏—Ç—å —É—Ä–æ–∫
@router.post("/teacher/courses/{course_id}/lessons/{lesson_id}", response_class=HTMLResponse)
async def update_lesson_form(
    request: Request,
    course_id: int,
    lesson_id: int,
    db: Session = Depends(get_db),
    title: str = Form(...),
    blockTitle: List[str] = Form(...),
    blockType: List[str] = Form(...),
    blockContent: List[str] = Form(...)
):
    try:
        user = await get_current_user(request, db)
        if not user or user.role != RoleEnum.TEACHER:
            return RedirectResponse("/login", status_code=302)
        
        course = course_service.find_course_by_id(db, course_id)
        lesson = lesson_service.find_by_id(db, lesson_id)
        
        if not course or not lesson:
            raise HTTPException(status_code=404, detail="–ö—É—Ä—Å –∏–ª–∏ —É—Ä–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω")
        if course.instructor_id != user.id or lesson.course_id != course_id:
            raise HTTPException(status_code=403, detail="–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")
        
        # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
        lesson_data = {
            "title": title,
            "course_id": course_id,
            "blocks": []
        }
        
        # –°–æ–±–∏—Ä–∞–µ–º –±–ª–æ–∫–∏
        for i in range(len(blockType)):
            lesson_data["blocks"].append({
                "title": blockTitle[i] if i < len(blockTitle) else "",
                "type": blockType[i],
                "content": blockContent[i] if i < len(blockContent) else ""
            })
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —É—Ä–æ–∫
        lesson_service.save_lesson(db, lesson_data, lesson_id)
        return RedirectResponse(f"/teacher/courses/{course_id}/lessons", status_code=303)
        
    except HTTPException as he:
        raise he
    except Exception as e:
        logger.error(f"Error updating lesson: {str(e)}", exc_info=True)
        raise HTTPException(status_code=500, detail="Error updating lesson")
    

# ‚úÖ –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π —É—Ä–æ–∫
@router.post("/teacher/courses/{course_id}/lessons", response_class=HTMLResponse)
async def create_lesson_form(
    request: Request,
    course_id: int,
    db: Session = Depends(get_db),
    title: str = Form(...),
    blockTitle: List[str] = Form(...),
    blockType: List[str] = Form(...),
    blockContent: List[str] = Form(...)
):
    try:
        user = await get_current_user(request, db)
        if not user or user.role != RoleEnum.TEACHER:
            return RedirectResponse("/login", status_code=302)
        
        course = course_service.find_course_by_id(db, course_id)
        if not course:
            raise HTTPException(status_code=404, detail="–ö—É—Ä—Å –Ω–µ –Ω–∞–π–¥–µ–Ω")
        if course.instructor_id != user.id:
            raise HTTPException(status_code=403, detail="–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω: –ö—É—Ä—Å –Ω–µ –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç —ç—Ç–æ–º—É —É—á–∏—Ç–µ–ª—é")
        
        # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
        lesson_data = {
            "title": title,
            "course_id": course_id,
            "blocks": []
        }
        
        # –°–æ–±–∏—Ä–∞–µ–º –±–ª–æ–∫–∏
        for i in range(len(blockType)):
            lesson_data["blocks"].append({
                "title": blockTitle[i] if i < len(blockTitle) else "",
                "type": blockType[i],
                "content": blockContent[i] if i < len(blockContent) else ""
            })
        
        # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π —É—Ä–æ–∫
        lesson_service.save_lesson(db, lesson_data)
        return RedirectResponse(f"/teacher/courses/{course_id}/lessons", status_code=303)
        
    except HTTPException as he:
        raise he
    except Exception as e:
        logger.error(f"Error creating lesson: {str(e)}", exc_info=True)
        raise HTTPException(status_code=500, detail="Error creating lesson")

# ‚úÖ –£–¥–∞–ª–∏—Ç—å –±–ª–æ–∫ —É—Ä–æ–∫–∞
@router.post("/teacher/courses/{course_id}/lessons/{lesson_id}/blocks/{block_id}/delete", response_class=HTMLResponse)
async def delete_block_form(
    request: Request,
    course_id: int,
    lesson_id: int,
    block_id: int,
    db: Session = Depends(get_db)
):
    try:
        user = await get_current_user(request, db)
        if not user or user.role != RoleEnum.TEACHER:
            return RedirectResponse("/login", status_code=302)
        
        course = course_service.find_course_by_id(db, course_id)
        lesson = lesson_service.find_by_id(db, lesson_id)
        
        if not course or not lesson:
            raise HTTPException(status_code=404, detail="–ö—É—Ä—Å –∏–ª–∏ —É—Ä–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω")
        if course.instructor_id != user.id or lesson.course_id != course_id:
            raise HTTPException(status_code=403, detail="–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")
        
        block_service.delete_block(db, block_id)
        return RedirectResponse(f"/teacher/courses/{course_id}/lessons/{lesson_id}/edit", status_code=303)
    except HTTPException as he:
        raise he
    except Exception as e:
        logger.error(f"Error deleting block: {str(e)}", exc_info=True)
        raise HTTPException(status_code=500, detail="Error deleting block")

@router.post("/myaccount/courses/{course_id}/lessons/{lesson_id}/complete")
async def mark_lesson_complete(
    course_id: int,
    lesson_id: int,
    request: Request,
    db: Session = Depends(get_db)
):
    try:
        user = await get_current_user(request, db)
        if not user:
            return RedirectResponse("/login", status_code=302)
            
        lesson = lesson_service.find_by_id(db, lesson_id)
        if not lesson or lesson.course_id != course_id:
            raise HTTPException(status_code=404, detail="–£—Ä–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω")
        
        # –û—Ç–º–µ—á–∞–µ–º —É—Ä–æ–∫ –∫–∞–∫ –ø—Ä–æ–π–¥–µ–Ω–Ω—ã–π
        lesson_progress_service.mark_completed(db, user, lesson)
        
        return RedirectResponse(
            f"/myaccount/courses/{course_id}/lessons/{lesson_id}",
            status_code=302
        )
        
    except Exception as e:
        print(f"Error in mark_lesson_complete: {str(e)}")
        raise HTTPException(status_code=500, detail="Internal Server Error")
    
@router.get("/myaccount/courses/{course_id}/lessons/{lesson_id}", response_class=HTMLResponse)
async def view_lesson(
    request: Request,
    course_id: int,
    lesson_id: int,
    db: Session = Depends(get_db)
):
    try:
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user = await get_current_user(request, db)
        if not user:
            return RedirectResponse("/login", status_code=302)
        
        # –ü–æ–ª—É—á–∞–µ–º –∫—É—Ä—Å –ø–æ –µ–≥–æ ID
        course = course_service.find_course_by_id(db, course_id)
        if not course:
            raise HTTPException(status_code=404, detail="–ö—É—Ä—Å –Ω–µ –Ω–∞–π–¥–µ–Ω")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞–ø–∏—Å–∞–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞ –∫—É—Ä—Å
        enrollment = enrollment_service.find_enrollment(db, user.id, course_id)
        if not enrollment:
            return RedirectResponse("/myaccount", status_code=302)
        
        # –ü–æ–ª—É—á–∞–µ–º —É—Ä–æ–∫
        lesson = lesson_service.find_by_id(db, lesson_id)
        if not lesson or lesson.course_id != course_id:
            raise HTTPException(status_code=404, detail="–£—Ä–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞–≤–µ—Ä—à—ë–Ω –ª–∏ —É—Ä–æ–∫
        is_completed = lesson_progress_service.has_completed_lesson(db, user, lesson)
        
        # –†–µ–Ω–¥–µ—Ä–∏–º —à–∞–±–ª–æ–Ω —Å –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
        return templates.TemplateResponse(
            "lesson_details.html",  # –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —ç—Ç–æ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ –∏–º—è –≤–∞—à–µ–≥–æ —à–∞–±–ª–æ–Ω–∞
            {
                "request": request,
                "course": course,       # –ü–µ—Ä–µ–¥–∞—ë–º –æ–±—ä–µ–∫—Ç –∫—É—Ä—Å–∞
                "lesson": lesson,      # –ü–µ—Ä–µ–¥–∞—ë–º –æ–±—ä–µ–∫—Ç —É—Ä–æ–∫–∞
                "is_completed": is_completed  # –ü–µ—Ä–µ–¥–∞—ë–º —Å—Ç–∞—Ç—É—Å –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
            }
        )
        
    except HTTPException as he:
        raise he
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ view_lesson: {str(e)}", exc_info=True)
        raise HTTPException(status_code=500, detail="–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞")